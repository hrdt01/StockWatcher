using System.Text.Json.Serialization;

namespace StockTracker.CrossCutting.ExceptionHandling.CustomExceptions;


public class ProblemDetails
{
    public ProblemDetails() { }

    public ProblemDetails(ProblemDetailsException exception)
    {
        Type = exception.Type;
        Title = exception.Title;
        Status = exception.Status;
        Detail = exception.Message;
        Extensions = exception.Extensions;
        TraceId = exception.TraceId;
    }

    /// <summary>
    /// Type of the exception. It must use <see cref="Utilities.ExceptionHandling.TypeCodeUrls"/>.
    /// A URI reference[RFC9110] that identifies the problem type.This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type.
    /// </summary>
    public string? Type { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type
    /// </summary>
    public string? Title { get; set; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    public int? Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    public string? Detail { get; set; }

    /// <summary>
    /// Collection of errors
    /// </summary>
    public Dictionary<string, List<string>>? Extensions { get; set; }

    /// <summary>
    /// Trace identifier generated at runtime for a specific request.
    /// Should ONLY be included in development environments
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string TraceId { get; set; }

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem. 
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Instance { get; set; }

    /// <summary>
    /// Stack trace of the exception
    /// Should ONLY be included in development environments
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StackTrace { get; set; }
}
