namespace StockTracker.CrossCutting.ExceptionHandling.CustomExceptions;


/// <inheritdoc />
[Serializable]
public class ProblemDetailsException : Exception
{
    /// <summary>
    /// A short, human-readable summary of the problem type
    /// </summary>
    public string Title { get; set; }

    /// <summary>
    /// Type of the exception. It must use <see cref="Utilities.ExceptionHandling.TypeCodeUrls"/>.
    /// A URI reference[RFC9110] that identifies the problem type.This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type.
    /// </summary>
    public string Type { get; set; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    public int Status { get; set; }

    /// <summary>
    /// The Error detail ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    public string? Detail { get; set; }

    /// <summary>
    /// The TraceId ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    public string? TraceId { get; set; }

    /// <summary>
    /// Enumeration of errors ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    public Dictionary<string, List<string>>? Extensions { get; set; }

    public ProblemDetailsException() { }

    public ProblemDetailsException(string message) : base(message) { }
    public ProblemDetailsException(string message, Exception ex) : base(message, ex) { }

    public ProblemDetailsException(string message, Dictionary<string, List<string>> errors) : base(message)
    {
        Extensions = errors;
    }

    public ProblemDetailsException(ProblemDetails details)
    {
        Title = details.Title ?? throw new ArgumentNullException($"{nameof(details)} exception Title is null or empty ");
        Status = details.Status ?? throw new ArgumentNullException($"{nameof(details)} exception Status is null or empty ");
        Detail = details.Detail ?? String.Empty;
        Extensions = details.Extensions;
        TraceId = details.TraceId;
    }
}
